@{
    Layout = "~/Views/Shared/Modals/_BaseModal.cshtml";
    ViewData["ModalId"] = "memberAddOrUpdateModal";
    ViewData["Title"] = (ViewData["Action"] as string == "CreateMember" ? "Add" : "Update") + " Member Modal";
    ViewData["SubmitButtonId"] = "submitMemberBtn";
    ViewData["ShowSubmitButton"] = true;
    ViewData["Size"] = "lg";
    ViewData["IsForm"] = true;
}
@model SACA_Common.DTOs.Account.Response.AccountFormView
<div id="memberForm">
    <div class="grid grid-cols-3 gap-4 text-black bg-white p-6 rounded">
       
        <input type="hidden" asp-for="id" value="@(ViewData["Action"] as string != "CreateMember" ? Model.id : null)" />
        
        <!-- Email -->
        <div class="flex flex-col">
            <label asp-for="email" class="text-gray-700 font-medium required-field"></label>
            <input asp-for="email" class="border border-gray-400 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Enter FPT's email (AnhTHHE171234@fpt.edu.vn)" />
            <span asp-validation-for="email" class="text-red-500 text-sm"></span>
        </div>

        <!-- Roll number -->
        <div class="flex flex-col">
            <label asp-for="roll_number" class="text-gray-700 font-medium required-field"></label>
            <input asp-for="roll_number" class="border border-gray-400 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Enter roll number (e.g. HE171234)" />
            <span asp-validation-for="roll_number" class="text-red-500 text-sm"></span>
        </div>

        <!-- Student Code -->
        <div class="flex flex-col">
            <label asp-for="student_code" class="text-gray-700 font-medium required-field"></label>
            <input asp-for="student_code" class="border border-gray-400 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Enter student code (e.g. AnhTHHE171234)" />
            <span asp-validation-for="student_code" class="text-red-500 text-sm"></span>
        </div>

        <!-- Fullname -->
        <div class="flex flex-col">
            <label asp-for="fullname" class="text-gray-700 font-medium required-field"></label>
            <input asp-for="fullname" class="border border-gray-400 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none" placeholder="Enter fullname" />
            <span asp-validation-for="fullname" class="text-red-500 text-sm"></span>
        </div>

        <!-- Username -->
        <div class="flex flex-col">
            <label asp-for="username" class="text-gray-700 font-medium"></label>
            <input asp-for="username" class="border border-gray-400 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none read-only:bg-[rgba(239,239,239,0.3)]" placeholder="Generated by the system, e.g, saca9876" readonly />
        </div>

        <!-- Password -->
        <div class="flex flex-col">
            <label asp-for="password" class="text-gray-700 font-medium"></label>
            <input asp-for="password" class="border border-gray-400 rounded-lg p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none read-only:bg-[rgba(239,239,239,0.3)]" placeholder="Generated by the system" readonly />
        </div>

        <input type="hidden" name="invitation_email_sent" />
    </div>
</div>
<script>
    let originalEmail;
    $(document).ready(function () {
        originalEmail = document.querySelector("#memberForm #email").value;

        document.querySelector("#submitMemberBtn").addEventListener("click", function(event){
            submitMemberForm(event);
        })

        //Pre-filled student_code and roll_number as the user done with email
        const emailInput = document.querySelector('input[name="email"]');
        const rollNumberInput = document.querySelector('input[name="roll_number"]');
        const studentCodeInput = document.querySelector('input[name="student_code"]');

        emailInput.addEventListener("blur", function () {
            const email = emailInput.value.trim();

            if (email.includes('@("@")')){
                const studentCode = email.split('@("@")')[0];
                const rollNumberMatch = studentCode.match(/[A-Za-z]{2}\d{6}$/); // 2 letters + 6 digits at the end
               
                if (studentCodeInput) {
                    studentCodeInput.value = studentCode;
                }

                if (rollNumberInput && rollNumberMatch) {
                    rollNumberInput.value = rollNumberMatch[0];
                }
            }
        });
    });

    function submitMemberForm(event){
        const membersDataInput = document.getElementById("membersData");
        event.preventDefault();
        // Get form data
        const form = event.target.closest("form");
        const formData = new FormData(form);
        //Dùng để check unique email khi gửi về ValidateMember của Controller, nếu email không unique, trả về status failed và gọi displayValidationErrors
        formData.append("member_emails", JSON.stringify(membersArray.map(m => m.email)));
        formData.append("action", "@ViewData["Action"]");
        formData.append("original_email", originalEmail);

        const member = {
            id: formData.get("id") || null,
            student_code: formData.get("student_code"),
            username: formData.get("username"),
            email: formData.get("email"),
            fullname: formData.get("fullname"),
            roll_number: formData.get("roll_number"),
            password: formData.get("password"),
            invitation_email_sent: Boolean(formData.get("invitation_email_sent")) || false
        };
        console.log(member)
        // Submit the form using AJAX
        fetch("@Url.Action("ValidateMember", "ContestManagement")", {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === "success") {
                
                if("@ViewData["Action"]" == "EditMember"){
                    let index = membersArray.findIndex(m => m.email === member.email);
                    if(index !== -1) membersArray[index] = member; //tìm được email thì update
                    else{ //không tìm được thì member đã được gán email mới, phải tìm index mới rồi assign vào membersArray
                        membersArray = membersArray.filter(m => m.email !== originalEmail);
                        const newIndex = membersArray.findIndex(m => m.email > member.email);
                        if(newIndex === -1){
                            membersArray.push(member);
                        } else {
                            membersArray.splice(newIndex, 0, member);
                        }
                    }
                }else{
                    const index = membersArray.findIndex(m => m.email > member.email);
                    if (index === -1) {
                        membersArray.push(member);
                    } else {
                        membersArray.splice(index, 0, member);
                    }
                }
                
                membersDataInput.value = JSON.stringify(membersArray);
                fetchMembersTabWithPage(1, 1000);

                closeModal("memberAddOrUpdateModal");
            } else {
                displayValidationErrors("memberAddOrUpdateModal", data.formErrors);
            }
        })
        .catch(error => console.error("Error submitting form:", error));
    }
</script>