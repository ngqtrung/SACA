@using SACA_Common.DTOs
@using SACA_Common.DTOs.Problem.Response
@using X.PagedList
@using X.PagedList.Mvc.Core


@model PagedResponse<SACA_Common.DTOs.Problem.Response.ProblemTableView>
@section BootstrapStyles {
<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
}

<form id="problemTableForm" method="post" action="@Url.Action("BulkDelete")" class="bg-white p-6 rounded">
    <table class="bg-white text-black table w-full">
        <caption class="text-gray-800 caption-top text-lg font-semibold">
            @if (Convert.ToBoolean(ViewData["IsProblemsDrafted"]) == false)
            {
                @:Problems Table
            }
            else
            {
                @:Drafted Version of Problems Table (Unpaginated).
                <span class="text-red-600 mt-1 block text-sm font-medium">
                    ⚠ Warning: Changes will not be saved until you save the contest. Reloading or exiting this page will result in data loss.
                </span>
            }
        </caption>
        <thead class="table-header-group">
            <tr class="bg-gray-100 table-row text-left">
                <th class="w-4 border-gray-300 px-3 py-2 border-r">
                    <input type="checkbox" id="selectAll">
                </th>
                <th class="w-4 border-gray-300 px-3 py-2 border-r">#</th>
                <th class="w-24 border-gray-300 px-3 py-2 border-r">
                    @Html.DisplayNameFor(model => new ProblemTableView().code)
                </th>
                <th class="w-64 border-gray-300 px-3 py-2 border-r">
                    @Html.DisplayNameFor(model => new ProblemTableView().title)
                </th>
                <th class="w-96 border-gray-300 px-3 py-2 border-r">
                    @Html.DisplayNameFor(model => new ProblemTableView().description)
                </th>
                <th class="w-24 border-gray-300 px-3 py-2 border-r">
                    @Html.DisplayNameFor(model => new ProblemTableView().tags)
                </th>
                <th class="border-gray-300 px-3 py-2 border-r">
                    @Html.DisplayNameFor(model => new ProblemTableView().score)
                </th>
                <th class="border-gray-300 px-3 py-2 border-r">
                    Max ATT
                </th>
                <th class="border-gray-300 px-3 py-2 border-r">
                    Num. of TC
                </th>
                @if (!(ViewData["IsViewOnly"] as bool? ?? false))
                {
                    <th class="w-8 border-gray-300 px-3 py-2 border-r">Action</th>
                }
            </tr>
        </thead>
        <tbody class="table-row-group">
            @if (Model == null || Model.Items == null || !Model.Items.Any())
            {
                <tr><td colspan="9">No problems added yet.</td></tr>
            }
            else
            {
                var itemNumber = 0;
                @foreach (var item in Model.Items)
                {
                    itemNumber++;
                    <tr class="table-row border-b"
                        data-index="@(itemNumber - 1)"
                        data-id="@item.id"
                        data-temp_id="@(item.id != null ? item.id : (itemNumber - 1))"
                        data-contest_id="@item.contest_id"
                        data-code="@item.code"
                        data-title="@item.title"
                        data-description='@item.description'
                        data-note="@item.note"
                        data-tags="@item.tags"
                        data-score="@item.score"
                        data-max-attempts="@item.max_attempts"
                        data-default_execution_time="@item.default_execution_time"
                        data-default_memory_limit="@item.default_memory_limit"
                        data-file="@(item.file?.name ?? null)"
                        data-file_id="@item.file_id"
                    >
                        <td class="px-3 py-2">
                            <input type="checkbox" name="selectedIds" value="@item.id" class="rowCheckbox">
                        </td>
                        <td class="px-3 py-2">@itemNumber</td>
                        <td class="px-3 py-2">
                        <a href="javascript:void(0)" class="detailProblem text-blue-500">
                                @Html.DisplayFor(modelItem => item.code)
                            </a>
                        </td>
                        <td class="px-3 py-2">
                            @Html.DisplayFor(modelItem => item.title)
                        </td>
                        <td class="px-3 py-2">
                            @Html.Raw(!string.IsNullOrEmpty(item.description)
                                        ? @Html.Raw(HtmlUtils.TruncateHtmlToPlainText(HtmlUtils.DecodeHtmlEntities(item.description), 200))
                                        : Html.Raw("<span class='text-gray-500 text-sm italic'>No description available</span>"))
                        </td>
                        <td class="px-3 py-2">
                            @Html.DisplayFor(modelItem => item.tags)
                        </td>
                        <td class="px-3 py-2 text-center">
                            @Html.DisplayFor(modelItem => item.score)
                        </td>
                        <td class="px-3 py-2 text-center">
                            @Html.DisplayFor(modelItem => item.max_attempts)
                        </td>
                        <td class="px-3 py-2 text-center">
                            @item.test_cases.Count()
                        </td>
                        @if (!(ViewData["IsViewOnly"] as bool? ?? false))
                        {
                            <td class="px-3 py-2">
                                <div class="justify-content-center space-x-2 flex items-center">
                                    <a href="javascript:void(0)" class="editProblem text-orange-500">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125" />
                                        </svg>
                                    </a>
                                    <a href="javascript:void(0)" class="deleteProblem text-red-500">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                        </svg>
                                    </a>
                                </div>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    <div class="w-full">
        @if (Convert.ToBoolean(ViewData["IsProblemsDrafted"]) == false)
        {
            @Html.PagedListPager(
                new StaticPagedList<ProblemTableView>(Model?.Items ?? new List<ProblemTableView>(), Model.page_index, Model.page_size, Model.total_items),
                page => $"javascript:fetchProblemsTabWithPage({page});",
                new PagedListRenderOptions
                {
                    DisplayLinkToFirstPage = PagedListDisplayMode.Never,
                    DisplayLinkToLastPage = PagedListDisplayMode.Never,
                    DisplayLinkToPreviousPage = PagedListDisplayMode.Never,
                    DisplayLinkToNextPage = PagedListDisplayMode.Never,
                    DisplayItemSliceAndTotal = true,
                    ContainerDivClasses = new[] { "flex justify-end mt-4 text-black" },
                    MaximumPageNumbersToDisplay = 5,
                    UlElementClasses = new[] { "pagination" },
                    LiElementClasses = new string[] { "page-item" },
                    PageClasses = new string[] { "page-link" },
                }   
            )
        }
    </div>
</form>

<script>
    $(document).ready(function () {
        const detailButtons = document.querySelectorAll(".detailProblem");

        detailButtons.forEach(button => {
            button.addEventListener("click", (event) => {
                let row = event.currentTarget.closest("tr");
                let url = '@Url.Action("OpenProblemsDetailModal", "ContestManagement")';
                let modalId = "problemDetailModal";
                openEditModal(row, url, modalId);
                reassignedTestcaseArrays(row.dataset.index);
            });
        });

        const editButtons = document.querySelectorAll(".editProblem");

        editButtons.forEach(button => {
            button.addEventListener("click", (event) => {
                let row = event.currentTarget.closest("tr");
                let url = '@Url.Action("OpenProblemsModal", "ContestManagement")';
                let modalId = "problemAddOrUpdateModal";
                openEditModal(row, url, modalId);
                reassignedTestcaseArrays(row.dataset.index); //assign correct testcasesArray for the chosen problem
            });
        });

        const deleteButtons = document.querySelectorAll(".deleteProblem");

        deleteButtons.forEach(button => {
            button.addEventListener("click", async (event) => {
                let row = event.currentTarget.closest("tr");
                if (!row) return;

                let temp_id = row.dataset.temp_id;
                if (!temp_id) return;

                let url = "@Url.Action("OpenDeleteModal", "ContestManagement")";
                let modalId = "problemDeleteModal";
                openDeleteModal("Problem", temp_id, url, modalId);
            });
        });
    });

    function reassignedTestcaseArrays(problemIndex){
        testcasesArray = JSON.parse(document.getElementById("problemsData").value)[problemIndex]?.test_cases;
        originalTestcasesArray = structuredClone(testcasesArray);
    }
</script>